devtools::document()
devtools::build()
devtools::document()
devtools::build()
usethis::use_package(package = "DESeq2", type = "Imports")
usethis::use_package(package = "tidyverse", type = "Imports")
use_package("tidyverse", type = "depends")
usethis::use_package("tidyverse", type = "depends")
usethis::use_package(package = "tibble", type = "Imports")
usethis::use_package(package = "Seurat", type = "Imports")
usethis::use_package(package = "parallel", type = "Imports")
usethis::use_package(package = "stats", type = "Imports")
usethis::use_package(package = "R", type = "depends",min_version = "4.3.1")
usethis::use_package(package = "matrixStats", type = "Imports")
usethis::use_package(package = "Matrix", type = "Imports")
usethis::use_package(package = "ggplot2", type = "Imports")
usethis::use_package(package = "survival", type = "Imports")
usethis::use_package(package = "survminer", type = "Imports")
usethis::use_package(package = "survminer", type = "Imports")
usethis::use_package(package = "cowplot", type = "Imports")
use_gpl3_license()
usethis::use_gpl3_license()
devtools::document()
devtools::build()
devtools::check()
usethis::use_package(package = "DESeq2", type = "Imports")
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
load("E:/bulk and single-cell/Data.RData")
TCGA_LAML_TPM <- TPM
TCGA_LAML_Surv <- surv.info
usethis::use_data(TCGA_LAML_TPM, TCGA_LAML_Surv)
gc()
devtools::document()
devtools::build()
BiocManager::install("TOAST")
library(TOAST)
vignette("TOAST")
data("RA_100samples")
View(RA_100samples)
Y_raw <- RA_100samples$Y_raw
Pheno <- RA_100samples$Pheno
Blood_ref <- RA_100samples$Blood_ref
View(Pheno)
View(Y_raw)
Design_out <- makeDesign(design, Prop)
View(Blood_ref)
source("~/.active-rstudio-document")
refinx <- findRefinx(Y_raw, nmarker = 1000)
Y <- Y_raw[refinx,]
K <- 6
outT <- myRefFreeCellMix(Y, mu0=myRefFreeCellMixInitialize(Y, K = K))
estProp_RF <- outT$Omega
View(estProp_RF)
library(EpiDISH)
outT <- epidish(beta.m = Y, ref.m = Ref, method = "RPC")
refinx <- findRefinx(Y_raw, nmarker = 1000)
Y <- Y_raw[refinx,]
Ref <- as.matrix(Blood_ref[refinx,])
library(EpiDISH)
outT <- epidish(beta.m = Y, ref.m = Ref, method = "RPC")
estProp_RB <- outT$estF
estProp_RF <- assignCellType(input=estProp_RF,
reference=estProp_RB)
View(estProp_RF)
mean(diag(cor(estProp_RF, estProp_RB)))
K=6
set.seed(1234)
outRF1 <- csDeconv(Y_raw, K, TotalIter = 30, bound_negative = TRUE)
stProp_RF_improved <- assignCellType(input=outRF1$estProp,
reference=estProp_RB)
View(stProp_RF_improved)
View(Blood_ref)
View(Blood_ref)
View(estProp_RF)
View(estProp_RB)
setwd("C:/Users/86133/Desktop/peak overlaps")
## Load package
library(tidyverse)
library(ggplot2)
library(GenomicRanges)
library(readr)
library(rtracklayer)
## Import data (change input file name here)
data1 <- read_delim("KBc_H3K4me1_Ctrl_peaks_Enhancers_withSuper.bed", delim = "\t", col_names = TRUE)
data2 <- read_delim("KBc_Ctrl_H3K27Ac_peaks_Enhancers_withSuper.bed", delim = "\t", col_names = TRUE)
colnames(data1) <- c("CHROM","START","STOP","NAME","SCORE")
colnames(data2) <- c("CHROM","START","STOP","NAME","SCORE")
data1 <- na.omit(data1)
data2 <- na.omit(data2)
interval1 <- GRanges(seqnames = data1$CHROM,
ranges = IRanges(start = data1$START,
end = data1$STOP))
interval2 <- GRanges(seqnames = data2$CHROM,
ranges = IRanges(start = data2$START,
end = data2$STOP))
tmp <- intersect(interval1, interval2,ignore.strand = T)
tmp
library(ggvenn)
data_name_1 <- "Ctrl_H3K4me1"     # change names of gene sets here
data_name_2 <- "Ctrl_H3K27Ac"
count <- length(tmp)
data1_UP <- c(paste0("A", 1:(nrow(data1)-count)),paste0("C", 1:count))
data2_UP <-  c(paste0("B", 1:(nrow(data2)-count)),paste0("C", 1:count))
list_UP <- list(data1_UP, data2_UP)
names(list_UP)[1] <- paste0(data_name_1)
names(list_UP)[2] <- paste0(data_name_2)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=6,
text_size=6,auto_scale=TRUE
)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=5,
text_size=5,auto_scale=TRUE
)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=4,
text_size=5,auto_scale=TRUE
)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=4.5,
text_size=4.5,auto_scale=TRUE
)
pdf(paste0("Venn_Diagram_of.pdf"),width=8, height=6)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=5,
text_size=5,auto_scale=TRUE
)
dev.off()
pdf(paste0("Venn_Diagram_of.pdf"),width=10, height=6)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=5,
text_size=5,auto_scale=TRUE
)
dev.off()
library(ggvenn)
data_name_1 <- "H3K4me1"     # change names of gene sets here
data_name_2 <- "H3K27Ac"
count <- length(tmp)
data1_UP <- c(paste0("A", 1:(nrow(data1)-count)),paste0("C", 1:count))
data2_UP <-  c(paste0("B", 1:(nrow(data2)-count)),paste0("C", 1:count))
list_UP <- list(data1_UP, data2_UP)
names(list_UP)[1] <- paste0(data_name_1)
names(list_UP)[2] <- paste0(data_name_2)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=5,
text_size=5,auto_scale=TRUE
)
pdf(paste0("Venn_Diagram_of.pdf"),width=8, height=6)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=5,
text_size=5,auto_scale=TRUE
)
dev.off()
pdf(paste0("Venn_Diagram_of.pdf"),width=10, height=7)
ggvenn(list_UP,
columns = c(paste0(data_name_1), paste0(data_name_2)),  #select gene sets to draw
show_percentage= FALSE,
fill_color	= c("#440154ff", '#21908dff'),
fill_alpha	= 0.3,
stroke_color='#4a4e69',
stroke_size = 0.8,
set_name_size=5,
text_size=5,auto_scale=TRUE
)
dev.off()
gc()
setwd("C:/Users/86133/Desktop/CircosPlot_Dec2023")
## Import data
data1 <- read_tsv("KBp_AML191FHDvsCtrl-Protein.tsv")
data2 <- read_tsv("KBr_AML191FHDvsCtrl-DE.tsv")
View(data1)
View(data2)
tmp <- data2 %>%
select(gene_id,gene_name,chr, start,end)
colnames(data1)[1] <- "gene_name"
data1 <- data1 %>% left_join(tmp,by = "gene_name")
data <- na.omit(data1) %>%
mutate(ENSEMBL=sub("\\..*", "", gene_id))
View(tmp)
View(data)
View(data1)
View(data1)
View(tmp)
## Import data
data1 <- read_tsv("KBp_AML191FHDvsCtrl-Protein.tsv")
View(data1)
View(data)
View(data)
data1 <- read_tsv("KBp_AML191FHDvsCtrl-Protein.tsv")
data2 <- read_tsv("KBr_AML191FHDvsCtrl-DE.tsv")
## Merge data1 and data2 to get chr informationo
tmp <- data2 %>%
select(gene_id,gene_name,chr, start,end)
colnames(data1)[1] <- "gene_name"
data1 <- data1 %>% left_join(tmp,by = "gene_name")
data <- na.omit(data1) %>%
mutate(ENSEMBL=sub("\\..*", "", gene_id))
## Modify colnames
colnames(data)[1] <- "SYMBOL"
colnames(data)[2] <- "log2FC"
colnames(data)[6] <- "Chrom"
colnames(data)[7] <- "Start"
View(data)
View(data)
